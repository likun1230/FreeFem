macro ffddmcoarsemeshsetupinit(pr,Thc)
IFMACRO(!pr#coarsemeshsetupinit)

pr#bCM = 1;

pr#prfe#prmesh#meshN pr#ThCoarse = pr#prfe#prmesh#minimalMesh;
fespace pr#VhCoarse(pr#ThCoarse,pr#prfe#fPk); /* fespace on the coarse mesh */

if (pr#prfe#prmesh#isincomm) {
  if (!pr#prfe#prmesh#binexactCS) {
    pr#ThCoarse = Thc;
    pr#ncoarsespace = pr#VhCoarse.ndof;
    
    if (!bpara) {
      matrix Zc = interpolate(pr#prfe#Vhglob,pr#VhCoarse); /* ZCM=R0^T */
      Zc.thresholding(1.e-10);
      pr#ZCM = Zc; /* (from real to 'complex' matrix for FreeFem) */    
    }
    else if (!pr#prfe#prmesh#excluded){
      matrix Zci = interpolate(pr#prfe#Vhi,pr#VhCoarse);
      Zci.thresholding(1.e-10);
      pr#ZCMi = Zci;
    }
    NewMacro localmacroaug pr#prfe#prmesh#buildAug EndMacro
    IFMACRO(localmacroaug,1)
    if (bseq) {
      pr#CSinterp = interpolate(pr#VhCoarse,pr#prfe#Vhglob);
    }
    else if (!pr#prfe#prmesh#excluded) {
      pr#CSinterp = interpolate(pr#VhCoarse,pr#prfe#Vhi);
    }
    ENDIFMACRO
  }
  else if (!pr#prfe#prmesh#excluded){
    NewMacro localmacroinexact pr#prfe#prmesh#minexactCS EndMacro
    IFMACRO (localmacroinexact,1)
    matrix Zci = interpolate(pr#prfe#Vhi,pr#prfe#CoarseVhi);
    Zci.thresholding(1.e-10);
    pr#ZCMi = Zci;
    pr#ncoarsespace = pr#prfe#CoarseNdofglobal;
    ENDIFMACRO
    ;
  }
  
  if (!pr#prfe#prmesh#excluded && pr#verbosity && (mpiRank(pr#prfe#prmesh#commddm) == 0))
  cout << "["+Stringification(pr)+"] Coarse space dimension: " << pr#ncoarsespace << endl;
}

NewMacro pr#coarsemeshsetupinit()1 EndMacro
ENDIFMACRO
// EOM

macro ffddmcoarsemeshsetup(pr,Thc,VarfEprec,VarfA)
ffddmcoarsemeshsetupinit(pr,Thc)
if (pr#prfe#prmesh#isincomm)
{
pr#corr = ffddmcorrection;
  
pr#prfe#prmesh#tic(pr#tloc)

if(bseq) {
  IFMACRO(VarfA)
  VarfA(vaglobalEprec,pr#prfe#prmesh#Thglob,pr#prfe#Vhglob)
  pr#AglobEprec = vaglobalEprec(pr#prfe#Vhglob,pr#prfe#Vhglob,sym=vsym,tgv=vtgvelim);
  ENDIFMACRO
  ;
}
else if (!pr#prfe#prmesh#excluded) {
  int i = mpiRank(pr#prfe#prmesh#commddm);
  
  IFMACRO(VarfA)
  pr#prfe#prmesh#Thi = pr#prfe#prmesh#aTh[i];
  
  NewMacro localmacroaug pr#prfe#prmesh#buildAug EndMacro
  IFMACRO(localmacroaug,1)
  pr#prfe#prmesh#AugThi = pr#prfe#prmesh#AugaTh[i];
  ENDIFMACRO
  IFMACRO(localmacroaug,0)
  pr#prfe#prmesh#meshN pr#prfe#prmesh#AugThi = pr#prfe#prmesh#Thi + pr#prfe#prmesh#aThborder[i]; /* local mesh augmented of one layer to define local Dirichlet matrices without the global matrix*/
  fespace pr#prfe#AugVhi(pr#prfe#prmesh#AugThi, pr#prfe#fPk);
  int[int] n2o = (0:pr#prfe#prmesh#Thi.nt-1);
  int[int] renum = restrict(pr#prfe#Vhi, pr#prfe#AugVhi,n2o);
  int[int] Ic = (0:pr#prfe#Vhi.ndof-1);
  real[int] Kc(pr#prfe#Vhi.ndof);
  Kc = 1;
  matrix pr#prfe#Auginterp = [Ic,renum,Kc];
  pr#prfe#Auginterp.resize(pr#prfe#Vhi.ndof, pr#prfe#AugVhi.ndof);
  ENDIFMACRO   

  VarfA(vPb, pr#prfe#prmesh#AugThi, pr#prfe#AugVhi)
  pr#aRdEprec = vPb(pr#prfe#AugVhi, pr#prfe#AugVhi, sym=vsym,tgv=vtgvelim);
  
  pr#prfe#K[int] rhsFull(pr#prfe#AugVhi.ndof);
  pr#prfe#K[int] rhs(pr#prfe#Vhi.ndof);
  
  renumbering(pr#aRdEprec, pr#prfe#Auginterp, rhsFull, rhs, eps=-1);
  ENDIFMACRO
}

if (!pr#prfe#prmesh#binexactCS) {
  {
    IFMACRO(!pr#bem)
    VarfEprec(cvaglobalEprec,pr#ThCoarse,pr#VhCoarse)
    /*if (mpirank < pr#prfe#prmesh#pCS || !bpara)*/
    if (mpirank == 0 || !bpara) {
      pr#ECM = cvaglobalEprec(pr#VhCoarse,pr#VhCoarse,solver=(vsym ? CG : GMRES),tgv=vtgv);  /* this is A_{eps,0} of Euan paper */
      /*pr#ECM.thresholding(1.e-10);*/
    }
    ENDIFMACRO
    /*
    IFMACRO(pr#bem,1)
    pr#Tmatrix<pr#prfe#K> Hloc = VarfEprec(pr#VhCoarse, pr#VhCoarse);
    pr#prfe#K[int,int] mdense(pr#VhCoarse.ndof, pr#VhCoarse.ndof);
    mdense = Hloc;
    pr#ECM = mdense;
    ENDIFMACRO
    */
  }

  if (bseq || mpirank < pr#prfe#prmesh#pCS) {
  	set(pr#ECM,solver=GMRES);
    set(pr#ECM,solver=sparsesolver,commworld=pr#prfe#prmesh#commCS,master=0,factorize=3); /* -1 */
  }
}
	
IFMACRO(pr#withhpddm)
AttachCoarseOperator(pr#prfe#prmesh#commddm, pr#hpddmOP, pr#Q);
ENDIFMACRO

pr#prfe#prmesh#toc(pr#tloc,"building E",pr#tbuildE)
} // EOM
