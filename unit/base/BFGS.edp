include "test.idp"

cout << functionDEFINITION << "BFGS" << endl;

real[int] b(10), u(10);
real t;

// Error
func real error (real[int] &u, real[int] &b) {
	real s = 0;
	for (int i = 0; i < u.n; i++)
		s += abs((i+1)*u[i] - b[i]);
	return s;
}

//J
func real J (real[int] &u) {
	real s = 0;
	for (int i = 0; i < u.n; i++)
		s += (i+1)*u[i]*u[i]*0.5 - b[i]*u[i];
	return s;
}

//the gradiant of J
func real[int] DJ (real[int] &u) {
	for (int i = 0; i < u.n; i++)
		u[i] = (i+1)*u[i];
	u -= b;
	return u;
}

cout << parameterDEFINITION << "with J, DJ, u, eps, nbiter, nbiterline" << endl;
b = 1;
u = 2;
t = clock();
BFGS(J, DJ, u, eps=1.e-6, nbiter=20, nbiterline=20);
t = clock() - t;
cout << timeELAPSED << t << endl;
real err = error(u, b);

t = clock();
BFGS(J, DJ, u, eps=1.e-6, nbiter=20, nbiterline=20);
t = clock() - t;
cout << timeELAPSED << t << endl;

test(err < 1.e-6);
