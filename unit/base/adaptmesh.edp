include "test.idp"

cout << functionDEFINITION << "adaptmesh" << endl;

real t;

cout << typeDEFINITION << "mesh" << endl;
mesh Th = square(5, 5);

fespace Uh(Th, P1);
Uh u=x+y, uu=x*y;
real hMin = 0.1;
real hMax = 0.5;
real Err = 1e-3;
real Errg = 1e-3;
int nbvtx = 1000;
int nbSmooth = 21;
int nbJacoby = 21;
real Ratio = 5;
real Omega = 1;
bool Iso = true;
bool AbsError = true;
real cutOff = 10;
real verbos = 1.5;
bool Inquire = true;
bool splitPbEdge = true;
int maxSubDiv = 5;
bool rescal = true;
bool keepBackVertices = true;
bool isMetric = false;
int poweer = 4;
int thetaMax = 90;
int splitInTwo = true;
bool noMeshGeneration = false;
real[int, int] Periodic = [[1., 1., 0.], [0., 1., 0.]];
func perio=[[4, y], [2, y], [1, x], [3, x]];
real[int] m11(Th.nv);
real[int] m12(Th.nv);
real[int] m22(Th.nv);

t = clock();
mesh Thnew = adaptmesh(Th, [u, uu], hmin=hMin, hmax=hMax, err=Err, errg=Errg,
  nbvx=nbvtx, nbsmooth=nbSmooth, nbjacoby=nbJacoby, ratio=Ratio, omega=Omega,
  iso=Iso, abserror=AbsError, cutoff=cutOff, verbosity=verbos, inquire=Inquire,
  splitpbedge=splitPbEdge, maxsubdiv=maxSubDiv, rescaling=rescal,
  keepbackvertices=keepBackVertices, IsMetric=isMetric, power=poweer, thetamax=thetaMax,
  splitin2=splitInTwo, nomeshgeneration=noMeshGeneration, periodic=perio, metric=[m11, m12, m22]);
t = clock() - t;
cout << timeELAPSED << t << endl;
test(Thnew.nt != Th.nt);
test(Thnew.nv != Th.nv);
test(Thnew.nbe != Th.nbe);
