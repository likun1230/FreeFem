include "test.idp"

cout << functionDEFINITION << "complexEigenValue" << endl;
real t;

real kc2 = 1.;
func g = y*(1.-y);

// Mesh
border a0(t=0., 1.){x=5.; y=1.+2.*t;}
border a1(t=0., 1.){x=5.-2.*t; y=3.;}
border a2(t=0., 1.){x=3.-2.*t; y=3.-2.*t;}
border a3(t=0., 1.){x=1.-t; y=1.;}
border a4(t=0., 1.){x=0.; y=1.-t;}
border a5(t=0., 1.){x=t; y=0.;}
border a6(t=0., 1.){x=1.+4.*t; y=t;}

mesh Th = buildmesh(a0(20) + a1(20) + a2(20)
    + a3(20) + a4(20) + a5(20) + a6(20));

// Fespace
fespace Vh(Th, P1);
Vh<complex> u, v;

// Solve
solve sound(u, v)
   = int2d(Th)(
        u*v * kc2
      - dx(u)*dx(v)
      - dy(u)*dy(v)
   )
   - int1d(Th, a4)(
        g * v
   )
   ;

real sigma = 20; // value of the shift

// Problem
// OP = A - sigma B;
varf vA(u1, u2)
   = int2d(Th)(
        dx(u1)*dx(u2)
      + dy(u1)*dy(u2)
      - sigma* u1*u2
   )
   ;

varf vB([u1], [u2])
   = int2d(Th)(
        u1*u2
   )
   ;

matrix<complex> A = vA(Vh, Vh, solver=Crout, factorize=1);
matrix<complex> B = vB(Vh, Vh, solver=CG, eps=1e-20);

// test(abs(rounded - 20.) < 1.);
