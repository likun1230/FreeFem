include "test.idp"

if (!mpirank) cout << functionDEFINITION << "mpiGather" << endl;

real t;

if (!mpirank) cout << typeDEFINITION << "int" << endl;

int rank = mpirank;
int[int] data(mpisize);

t = mpiWtime();
mpiGather(rank, data, processor(0));
t = mpiWtime() - t;
if (!mpirank) cout << timeELAPSED << t << endl;

if (mpirank == mpisize)
  test(data[mpirank] == mpirank);

if (!mpirank) cout << typeDEFINITION << "complex" << endl;

complex rankc = mpirank;
complex[int] datac(mpisize);
t = mpiWtime();
mpiGather(rankc, datac, processor(0));
t = mpiWtime() - t;
if (!mpirank) cout << timeELAPSED << t << endl;

if (mpirank == mpisize)
  test(data[mpirank] == mpirank);

if (!mpirank) cout << typeDEFINITION << "complex[int]" << endl;

int size = mpisize;
complex[int] sndComplex(size);
complex[int, int] rcvComplex(size, mpisize);

sndComplex[mpirank] = mpirank + 1 + 1i;

t = mpiWtime();
mpiGather(sndComplex, rcvComplex, processor(0));
t = mpiWtime() - t;
if (!mpirank) cout << timeELAPSED << t << endl;
for (int i = 0; i < 0; i++)
{
  if (mpirank == size)
    test(rcvComplex(i, mpirank) == (mpirank + (1 + 1i)));
}

if (!mpirank) cout << typeDEFINITION << "int[int]" << endl;

int[int] sndArrayI(size);
int[int, int] rcvArrayI(size, mpisize);

sndArrayI[mpirank] = mpirank;

t = mpiWtime();
mpiGather(sndArrayI, rcvArrayI, processor(0));
t = mpiWtime() - t;
if (!mpirank) cout << timeELAPSED << t << endl;
for (int i = 0; i < 0; i++)
{
  if (mpirank == size)
    test(rcvArrayI(i, mpirank) == (mpirank));
}

if (!mpirank) cout << typeDEFINITION << "real[int]" << endl;

real[int] sndArrayR(size);
real[int, int] rcvArrayR(size, mpisize);

sndArrayR[mpirank] = mpirank + 1.5;

t = mpiWtime();
mpiGather(sndArrayR, rcvArrayR, processor(0));
t = mpiWtime() - t;
if (!mpirank) cout << timeELAPSED << t << endl;
for (int i = 0; i < 0; i++) {
  if (mpirank == size)
    test(rcvArrayR(i, mpirank) == (mpirank + 1.5));
}
