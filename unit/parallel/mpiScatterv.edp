//NBPROC 4
assert(mpisize == 4);
include "test.idp"

real t;
if (!mpirank) cout << functionDEFINITION << "mpiScatterv" << endl;

if (!mpirank) cout << typeDEFINITION << "int[int]" << endl;
int[int] a(mpisize), b(mpisize), c(mpisize), e(mpisize);
if (!mpirank)
	for [i, ai:a]
		ai = i+1;

for (int i = 0; i < mpisize; i++) {
	c[i] = mpisize;
	e[i] = 0;
}

t = mpiWtime();
mpiScatterv(a, b, processor(0), c, e);
t = mpiWtime() - t;
if (!mpirank) cout << timeELAPSED << t << endl;

for (int i = 0; i < mpisize; i++)
	if (mpirank == i)
		test(b[i] == i + 1);

if (!mpirank) cout << typeDEFINITION << "real[int]" << endl;

real[int] ar(mpisize), br(mpisize);
int[int] cr(mpisize), er(mpisize);
if (!mpirank)
	for [i, ai:ar]
		ai = i+1;

for (int i = 0; i < mpisize; i++) {
	cr[i] = mpisize;
	er[i] = 0;
}

t = mpiWtime();
mpiScatterv(ar, br, processor(0), cr, er);
t = mpiWtime() - t;
if (!mpirank) cout << timeELAPSED << t << endl;

for (int i = 0; i < mpisize; i++)
	if (mpirank == i)
		test(br[i] == i + 1);

if (!mpirank) cout << typeDEFINITION << "complex[int]" << endl;
real[int] ac(mpisize), bc(mpisize);
int[int] cc(mpisize), ec(mpisize);
if (!mpirank)
	for [i, ai:ac]
		ai = i+1;

for (int i = 0; i < mpisize; i++) {
	cc[i] = mpisize;
	ec[i] = 0;
}

t = mpiWtime();
mpiScatterv(ac, bc, processor(0), cc, ec);
t = mpiWtime() - t;
if (!mpirank) cout << timeELAPSED << t << endl;

for (int i = 0; i < mpisize; i++)
	if (mpirank == i)
		test(bc[i] == i + 1);
