include "test.idp"
load "BEC"

real t;

cout << functionDEFINITION << "BECtrap" << endl;

mesh Th = square(2, 2);
real[int] b1 = [0, 0, 0, 0];
real[int] b2 = [0, 0, 0, 0, 0, 0];
real res;

t = clock();
res = int2d(Th)(BECtrap(b1));
t = clock() - t;
cout << timeELAPSED << t << endl;
test(abs(res) < HWERROR);

t = clock();
res = int2d(Th)(BECtrap(b2));
t = clock() - t;
cout << timeELAPSED << t << endl;
test(abs(res) < HWERROR);

cout << functionDEFINITION << "GPvortex" << endl;

{
  t = clock();
  complex vortex = int2d(Th)(GPvortex(4, 2, 0));
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(abs(vortex) < HWERROR);
}

cout << functionDEFINITION << "GPvortices" << endl;
{
  real[int, int] i = [[1, 2, 0], [1, 2, 0], [1, 2, 0]];
  t = clock();
  complex vortex = int2d(Th)(GPvortices(i));
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(abs(vortex) < HWERROR);
}

cout << functionDEFINITION << "dxGPvortex" << endl;
{
  t = clock();
  complex vortex = dxGPvortex(4, 2, 0);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(abs(vortex) < HWERROR);
}

cout << functionDEFINITION << "dyGPvortex" << endl;
{
  t = clock();
  complex vortex = dyGPvortex(4, 2, 0);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(abs(vortex) < HWERROR);
}
