include "test.idp"
load "ClosePoints"

cout << functionDEFINITION << "Voisinage" << endl;

real t;
real[int, int] P(10, 2);
real[int, int] Q(11, 2);
for (int i = 0; i < P.n; ++i) {
  P(i, 0) = i;
  P(i, 1) = i-1;
  Q(i, 0) = P(i,0) + i*0.001;
  Q(i, 1) = P(i,1) + i*0.001;
}
for (int i = P.n; i < Q.n; ++i) {
  Q(i, 0) = randreal1();
  Q(i, 1) = randreal1();
}
Q(P.n, :) = P(0, :);
Q(P.n-2, :) = P(0, :);

int[int][int] ij(10);
t = clock();
Voisinage(P, Q, 0.01, ij);
t = clock() - t;
cout << timeELAPSED << t << endl;
test(ij[0][0] == 0 && ij[0][1] == 8 && ij[0][2] == 10);
test(ij[1][0] == 1);
test(ij[2][0] == 2);
test(ij[3][0] == 3);
test(ij[4][0] == 4);
test(ij[5][0] == 5);
test(ij[6][0] == 6);

cout << functionDEFINITION << "ClosePoints" << endl;

{
  real[int, int] P(100, 3);
  real[int, int] Q(100, 2);
  for (int i = 0; i < P.n; ++i) {
    P(i, 0) = 0.5 + 0.1*cos(i*0.02*pi);
    P(i, 1) = 0.5 + 0.1*sin(i*0.02*pi);
    P(i, 2) = 0.05*0.05*2*pi;
    Q(i, 0) = P(i, 0) + i*0.001;
    Q(i, 1) = P(i, 1);
  }

  real[int] xx = [0, 1, 1, 0], yy = [0, 0, 1, 1];

  real[int] RC = [0.1, 0.05, 0.05, 0.1],
            XC = [0.2, 0.8, 0.2, 0.8],
            YC = [0.2, 0.8, 0.8, 0.2];
  int[int] NC = [-10, -11, -12, 13];

  border bb(t=0,1;i) {
    int ii = (i+1)%4;
    real t1 = 1-t;
    x = xx[i]*t1 + xx[ii]*t;
    y = yy[i]*t1 + yy[ii]*t;
    label = 0;
  }

  border cc(t=0,2*pi;i) {
    x = RC[i]*cos(t)+XC[i];
    y = RC[i]*sin(t)+YC[i];
    label = i+1;
  }
  int[int] nn = [4, 4, 5, 7];
  mesh th = buildmesh(bb(nn) + cc(NC), points=P, nbvx=100000);
  real eps = 0.01;

  t = clock();
  int[int] I = ClosePoints(eps, th, Q);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  t = clock();
  int[int] J = ClosePoints1(eps, th, Q);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  t = clock();
  int[int] II = ClosePoints(eps, Q');
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  t = clock();
  int[int] JJ = ClosePoints1(eps, Q');
  t = clock() - t;
  cout << timeELAPSED << t << endl;

  test(I.n == 100);
  test(J.n == 665);
  test(II.n == 52);
  test(JJ.n == 100);
}

{
  real[int, int] P(100, 3);
  real[int, int] Q(2, 100);
  for (int i=0; i<P.n; ++i) {
    P(i, 0) = 0.5 + 0.1*cos(i*0.02*pi);
    P(i, 1) = 0.5 + 0.1*sin(i*0.02*pi);
    P(i, 2) = 0.05*0.05*2*pi;
    Q(0, i) = P(i, 0) + i*0.001;
    Q(1, i) = P(i, 1);
  }

  real[int] xx = [0, 1, 1, 0], yy = [0, 0, 1, 1];

  real[int] RC = [0.1, 0.05, 0.05, 0.1],
            XC = [0.2, 0.8, 0.2, 0.8],
            YC = [0.2, 0.8, 0.8, 0.2];
  int[int] NC = [-10, -11, -12, 13];

  border bb(t=0,1;i) {
    int ii = (i+1)%4;
    real t1 = 1-t;
    x = xx[i]*t1 + xx[ii]*t;
    y = yy[i]*t1 + yy[ii]*t;
    label = 0;
  }

  border cc(t=0,2*pi;i) {
    x = RC[i]*cos(t)+XC[i];
    y = RC[i]*sin(t)+YC[i];
    label = i+1;
  }
  int[int] nn = [4, 4, 5, 7];
  mesh th = buildmesh(bb(nn) + cc(NC), points=P, nbvx=100000);
  real eps = 0.01;

  t = clock();
  int[int] I = ClosePoints(eps, Q);
  t = clock() - t;
  cout << timeELAPSED << t << endl;

  test(I.n == 52);
}

{
  cout << functionDEFINITION << "neighborhood" << endl;

  real[int,int] P(10, 2);
  real[int,int] Q(11, 2);
  for (int i = 0; i < P.n; ++i) {
    P(i, 0) = i;
    P(i, 1) = i - 1;
    Q(i, 0) = P(i, 0) + i*0.001;
    Q(i, 1) = P(i, 1) + i*0.001;
  }
  for (int i = P.n; i < Q.n; ++i) {
    Q(i, 0) = randreal1();
    Q(i, 1) = randreal1();
  }
  Q(P.n, :) = P(0, :);
  Q(P.n-2, :) = P(0, :);
  int[int][int] ij(10);
  t = clock();
  neighborhood(P, Q, 0.01, ij);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(ij[0][0] == 0 && ij[0][1] == 8 && ij[0][2] == 10);
  test(ij[1][0] == 1);
  test(ij[2][0] == 2);
  test(ij[3][0] == 3);
  test(ij[4][0] == 4);
  test(ij[5][0] == 5);
  test(ij[6][0] == 6);
}

cout << functionDEFINITION << "ClosePoints2" << endl;
{
  real[int,int] P(100, 3);
  real[int,int] Q(100, 2);
  for (int i = 0; i < P.n; ++i) {
    P(i, 0) = 0.5 + 0.1*cos(i*0.02*pi);
    P(i, 1) = 0.5 + 0.1*sin(i*0.02*pi);
    P(i, 2) = 0.05*0.05*2*pi;
    Q(i, 0) = P(i, 0) + i*0.001;
    Q(i, 1) = P(i, 1);
  }

  real[int] xx = [0, 1, 1, 0], yy = [0, 0, 1, 1];

  real[int] RC = [0.1, 0.05, 0.05, 0.1],
            XC = [0.2, 0.8, 0.2, 0.8],
            YC = [0.2, 0.8, 0.8, 0.2];
  int[int] NC = [-10, -11, -12, 13];

  border bb(t=0,1;i) {
    int ii = (i+1)%4;
    real t1 = 1-t;
    x = xx[i]*t1 + xx[ii]*t;
    y = yy[i]*t1 + yy[ii]*t;
    label = 0;
  }

  border cc(t=0,2*pi;i) {
    x = RC[i]*cos(t)+XC[i];
    y = RC[i]*sin(t)+YC[i];
    label = i+1;
  }
  int[int] nn = [4, 4, 5, 7];
  mesh th = buildmesh(bb(nn) + cc(NC), points=P, nbvx=100000);
  real eps = 0.01;

  real[int, int] thReal = P;
  real[int, int] thReal2 = Q;
  t = clock();
  int[int] I = ClosePoints2(eps, thReal, thReal2);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(I[0] == 0 && I[1] == 1);
}

cout << functionDEFINITION << "BorderIntersect" << endl;
{
  real[int, int] P(100, 3);
  real[int, int] Q(100, 2);
  for (int i = 0; i < P.n; ++i) {
    P(i, 0) = 0.5 + 0.1*cos(i*0.02*pi);
    P(i, 1) = 0.5 + 0.1*sin(i*0.02*pi);
    P(i, 2) = 0.05*0.05*2*pi;
    Q(i, 0) = P(i, 0) + i*0.001;
    Q(i, 1) = P(i, 1);
  }

  real[int] xx = [0, 1, 1, 0], yy = [0, 0, 1, 1];

  real[int] RC = [0.1, 0.05, 0.05, 0.1],
            XC = [0.2, 0.8, 0.2, 0.8],
            YC = [0.2, 0.8, 0.8, 0.2];
  int[int] NC = [-10, -11, -12, 13];

  border bb(t=0,1;i) {
    int ii = (i+1)%4;
    real t1 = 1-t;
    x = xx[i]*t1 + xx[ii]*t;
    y = yy[i]*t1 + yy[ii]*t;
    label = 0;
  }

  border cc(t=0,2*pi;i) {
    x = RC[i]*cos(t)+XC[i];
    y = RC[i]*sin(t)+YC[i];
    label = i+1;
  }
  int[int] nn = [4, 4, 5, 7];
  mesh th = buildmesh(bb(nn) + cc(NC), points=P, nbvx=100000);
  real eps = 0.01;

  real[int, int] thReal = P;
  real[int, int] thReal2 = Q;
  int[int, int] thReal3 = [[0, 0, 0], [0, 0, 0]];
  int[int] I = ClosePoints2(eps, thReal, thReal2);
  test(I[0] == 0 && I[1] == 1);
}
