include "test.idp"
load "Element_Mixte3d"
load "msh3"

cout << functionDEFINITION << " Element_Mixte3d" << endl;

real t;
mesh3 Th = cube(5, 5, 5);

cout << parameterDEFINITION << "Edge23ds0" << endl;

{
  fespace Uh1(Th, Edge23ds0);
  Uh1 [u1];
  Uh1 [u2];
  Uh1 [err1];

  t = clock();
  u2 = dx(u1);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  err1 = abs(u2 - u1);
  test(err1[].linfty < HWERROR);
}

cout << parameterDEFINITION << "Edge13ds0" << endl;

{
  fespace Uh1(Th, Edge13ds0);
  Uh1 [u1];
  Uh1 [u2];
  Uh1 [err1];

  t = clock();
  u2 = dx(u1);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  err1 = abs(u2 - u1);
  test(err1[].linfty < HWERROR);
}

cout << parameterDEFINITION << "Edge03ds0" << endl;

{
  fespace Uh1(Th, Edge03ds0);
  Uh1 [u1];
  Uh1 [u2];
  Uh1 [err1];

  t = clock();
  u2 = dx(u1);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  err1 = abs(u2 - u1);
  test(err1[].linfty < HWERROR);
}

cout << parameterDEFINITION << "Edge13d" << endl;

{
  fespace Uh1(Th, Edge13d);
  Uh1 [u1, u2, u3];
  Uh1 [err1, err2, err3];

  t = clock();
  [u1, u2, u3] = [0, dx(u1), 3];
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  [err1, err2, err3] = [abs(u2 - u1), 0, 0];
  test(err1[].linfty < HWERROR);
}

cout << parameterDEFINITION << "Edge23d" << endl;

{
  fespace Uh1(Th, Edge23d);
  Uh1 [u1, u2, u3];
  Uh1 [err1, err2, err3];

  t = clock();
  [u1, u2, u3] = [0, dx(u1), 3];
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  [err1, err2, err3] = [abs(u2 - u1), 0, 0];
  test(err1[].linfty < HWERROR);
}

cout << parameterDEFINITION << "RT13d" << endl;

{
  fespace Uh1(Th, RT13d);
  Uh1 [u1, u2, u3];
  Uh1 [err1, err2, err3];

  t = clock();
  [u1, u2, u3] = [0, dx(u1), 3];
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  [err1, err2, err3] = [abs(u2 - u1), 0, 0];
  test(err1[].linfty < HWERROR);
}
