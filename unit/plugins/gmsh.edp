include "test.idp"
load "gmsh"
load "msh3"
load "iovtk"
real t;

cout << functionDEFINITION << "gmshload3" << endl;
{
  t = clock();
  mesh3 Th = gmshload3("assets/cube.msh");
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(Th.nt > 0);
}

cout << functionDEFINITION << "gmshloadS" << endl;
{
  t = clock();
  meshS Th = gmshloadS("assets/ThS.msh");
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(Th.nt > 0);
}

cout << functionDEFINITION << "gmshload" << endl;
{
  t = clock();
  mesh Th = gmshload("assets/gmsh_mesh.msh");
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(Th.nt > 0);
}

cout << functionDEFINITION << "savegmsh" << endl;
cout << parameterDEFINITION << "meshS" << endl;
{
  int nn=20;
  mesh Th2=square(nn,nn,region=0);
  fespace Vh2(Th2,P2);
  Vh2 ux,uz,p2;
  int[int] rup=[0,2],  rdown=[0,1], rmid=[1,1,2,1,3,1,4,1];
  real zmin=0,zmax=1;
  mesh3 Th=buildlayers(Th2,nn,
    zbound=[zmin,zmax],
    labelmid=rmid,
    reffaceup = rup,
    reffacelow = rdown);

  Th = buildSurface(Th);
  meshS ThS= Th.Gamma;

  fespace Vh(ThS,P2);
  Vh u,v;

  func ue =   2*x*x + 3*y*y + 4*z*z + 5*x*y+6*x*z+1;
  func uex=   4*x+  5*y+6*z;
  func uey=   6*y + 5*x;
  func uez=   8*z +6*x;
  func f= -18. ;

  macro Grad3(u) [dx(u),dy(u),dz(u)]  // EOM
  //
  problem Lap3dS(u,v,solver=CG)  =
    int2d(ThS)(Grad3(v)' *Grad3(u)) //') for emacs
    + int1d(ThS,2)(u*v)
    - int2d(ThS)(f*v)
    - int1d(ThS,2) ( ue*v + (uex*N.x +uey*N.y +uez*N.z)*v )
    + on(1,u=ue);
  Lap3dS;
  savegmsh(ThS,"ThS");
}

cout << functionDEFINITION << "savegmsh" << endl;
cout << parameterDEFINITION << "mesh3" << endl;
{
  border Gamma(t=0,2*pi){x=cos(t);y=sin(t);label=3;}
  border Gamma1(t=0,2*pi){x=2*cos(t);y=2*sin(t);label=5;}
  mesh Th2 = buildmesh( Gamma(10)+Gamma1(20) );

  fespace Vh(Th2,P1);     // P1 FE space
  func gg=x;
  Vh uh,vh,u;
  Vh ggg=gg;
  solve laplacep(uh,vh,solver=CG,tgv=1e5) =      //  definion of  the problem
      int2d(Th2)( dx(uh)*dx(vh) + dy(uh)*dy(vh) )   //  bilinear form
         + on(3,uh=1)+ on(5,uh=2) ;                        //  boundary condition form

  cout << "vtk information" << endl;
  int[int] fforder=[0,0,1,0,1];
  savevtk("disque.vtk",Th2,uh,ggg,uh,[uh,ggg],[uh,ggg],dataname="kkdjd jyqql bidule45 vector nnn nn44233T",order=fforder);


  mesh3 Th3;
  try {
  Th3=readmesh3("assets/spherewithahole.mesh"); // This .mesh file is obtaing with tetgenholeregion.edp
  }
  catch (...) {
    mesh3 Thedp;// mesh3 variable  out the block
    {
    include "../examples/plugin/tetgenholeregion_rugby.edp"
    Thedp=Th3finhole;// save de correcte mesh
    }
    Th3=Thedp;// set coorect variable ...
  }
  fespace Vh3(Th3,P1);     // P1 FE space
  func gg2=x+y;
  int[int] fforder2=[0,0,1,1];
  verbosity=6;
  savevtk("bidule.vtk",Th3,gg2,[gg2,gg2,gg2],gg2,[gg2,gg2,gg2],order=fforder2,dataname="kkdjd jyqql bidule45"); // The fourth solution Have no name. This name is vector4 (4 ==> fourth solution and vector ==> vector solution).

  savegmsh(Th3,"Th3");
}
