include "test.idp"
load "gsl"

real t;
real [int] p2=[ 2,-3,1];
real [int] p3=[ 8,-10,1,1];
real [int] X(3);
complex[int] Z(4);
real [int] Q4=[ -1,0,0,0,1];

cout << functionDEFINITION << "gslpolysolvequadratic" << endl;
{
  t = clock();
  real retvalue = gslpolysolvequadratic(p2,X);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(retvalue == 2);
}

cout << functionDEFINITION << "gslpolysolvecubic" << endl;
{
  t = clock();
  real retvalue = gslpolysolvecubic(p3,X);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(retvalue == 3);
}

cout << functionDEFINITION << "gslpolycomplexsolve" << endl;
{
  t = clock();
  real retvalue = gslpolycomplexsolve(Q4,Z);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(retvalue == 0);
}

cout << functionDEFINITION << "gslrnguniform" << endl;
{
  cout << "\n\n gsl random :\n\n";
  cout << " list of generator " << ngslrng << endl;
  cout << functionDEFINITION << "gslname" << endl;
  for(int i=0; i <ngslrng ; ++i)
    cout << i << " name  " <<  gslname(gslrngtype(i)) << endl;
  gslrng r=gslrngtype(1);// chose a generator
  for (int i = 0; i < 10; i++) {
    t = clock();
    cout << gslrnguniform(r) << endl;
    t = clock() - t;
    cout << timeELAPSED << t << endl;
  }
}

cout << functionDEFINITION << "gslrnguniformpos" << endl;
{
  gslrng r=gslrngtype(1);
  t = clock();
  real retvalue = gslrnguniformpos(r);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
}

cout << functionDEFINITION << "gslrngget" << endl;
{
  gslrng r=gslrngtype(1);
  t = clock();
  real retvalue = gslrngget(r);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
}

cout << functionDEFINITION << "gslrngmin" << endl;
{
  gslrng r=gslrngtype(1);
  t = clock();
  real retvalue = gslrngmin(r);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
}

cout << functionDEFINITION << "gslrngmax" << endl;
{
  gslrng r=gslrngtype(1);
  t = clock();
  real retvalue = gslrngmax(r);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
}

cout << functionDEFINITION << "gslrngset" << endl;
{
  gslrng r=gslrngtype(1);
  t = clock();
  real retvalue = gslrngset(r, 1);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
}

cout << functionDEFINITION << "gslrngtype" << endl;
{
  t = clock();
  gslrng r = gslrngtype(1);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
}

real x0=0.2;
int n=10;
real[int,int] dspline(2,n+6);
for(int i=0; i<= n+5; ++i)
 {
   real xx = square(real(i)/n)+x0;
   real yy = sin(xx*pi*2);
   dspline(0,i)= xx;
   dspline(1,i)= yy;
 }
gslspline spline(gslinterplinear,dspline);
int mm=100;
real[int] xx(mm+1),yy(mm+1),zz(mm+1),dyy(mm+1),ddyy(mm+1),dzz(mm+1),ddzz(mm+1);
real err=0;
for (int i=0; i<=mm; ++i) {
  xx[i]= real(i)/mm+x0;
  yy[i]= spline(xx[i]);
  dyy[i]= spline.d(xx[i]);
  ddyy[i]= spline.dd(xx[i]);
  zz[i]= sin(pi*xx[i]*2);
  dzz[i]= 2*pi*cos(pi*xx[i]*2);
  ddzz[i]= -2*pi*2*pi*sin(pi*xx[i]*2);
  err = max( err , abs(yy[i]-zz[i]));
  cout << xx[i] << " " << yy[i] << "  ~ " << zz[i] << ",  " << dyy[i] << " ~ " << dzz [i] <<  " , " << ddyy[i] << " " << ddzz[i] <<  endl;
}
cout << dspline(1,0) << " ==  " << spline(-1) << " " << spline(100) << " == "<< dspline(1,dspline.m-1) << endl;
cout << " err = " << err << endl;
test(err < 0.3);
