load "ilut"
include "test.idp"

real t;
mesh Th=square(10,10);
fespace Qh(Th,P1);
fespace Vh(Th,P2);
real nu=1;
varf mp(p,q)=int2d(Th)(p*q/nu);

matrix Mp=mp(Qh,Qh);
real[int] diagMp(Qh.ndof); diagMp=Mp.diag; diagMp=1/nu*diagMp;

real[int] ilutOUT(Vh.ndof+Qh.ndof);

func real[int] ilutMp(real[int] & xx) {
	real[int] uuin(Vh.ndof);
	real[int] ppin(Qh.ndof);

	real[int] uuout(Vh.ndof);
	real[int] ppout(Qh.ndof);

	[uuin,ppin]=xx;

	for(int k=0;k<Qh.ndof;++k)  {
		ppout[k]=ppin[k]/diagMp[k];
	}

  cout << functionDEFINITION << "applyIlutPrecond" << endl;
  t = clock();
	uuout=applyIlutPrecond(uuin);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
	ilutOUT=[uuout,ppin];
	return ilutOUT;

	cout << functionDEFINITION << "applyIlutPrecond" << endl;
	{
		int[int] precon1 = [0, 0, 0];
		int[int] precon2 = [1, 1, 1];
		real[int] precon3 = [2, 2, 2];
		t = clock();
		// int[int] I, J;
		// real[int] C;
		// [I, J, C] = makeIlutPrecond(precon1, precon2, precon3);
		t = clock() - t;
		cout << timeELAPSED << t << endl;
	}

}
//dumptable(cout);
// Uses ILUT for the velocity and I for the pressure
func real[int] ilut(real[int] & xx) {
  t = clock();
	ilutOUT=applyIlutPrecond(xx);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
	return ilutOUT;
}

// Dummy do-nothing preconditioner
func real[int] dummy(real[int] & xx) {
	ilutOUT=xx;
	return ilutOUT;
}
