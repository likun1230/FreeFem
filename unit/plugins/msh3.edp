include "test.idp"
load "msh3"
load "gsl"
load "tetgen"

cout << functionDEFINITION << "change" << endl;
{
  searchMethod=1;
  verbosity=1;
  real a=1, d=0.5, h=0.5;
  border b1(t=0.5,-0.5) {x=a*t; y=-a/2; label=1;};
  border b2(t=0.5,-0.5) {x=a/2; y=a*t; label=2;};
  border b3(t=0.5,-0.5) {x=a*t; y=a/2; label=3;};
  border b4(t=0.5,-0.5) {x=-a/2; y=a*t; label=4;};
  border i1(t=0,2*pi) {x=d/2*cos(t); y=-d/2*sin(t); label=7;};
  int nnb=7, nni=10;
  mesh Th=buildmesh(b1(-nnb)+b3(nnb)+b2(-nnb)+b4(nnb)+i1(nni));
  int nz=3;
  {
    int[int] old2new(0:Th.nv-1);
    fespace Vh2(Th,P1);
    Vh2 sorder=x+y;
    sort(sorder[],old2new);
    int[int]  new2old=old2new^-1;
    Th= change(Th,renumv=new2old);
    sorder[]=0:Th.nv-1;
  }
}

cout << functionDEFINITION << "movemesh3" << endl;

real t;

int savex = x;
int savey = y;
int savez = z;
int[int] refx=[0,1];
mesh3 Th3 = cube(10, 10, 10);
t = clock();
mesh3 MovedTh3 = movemesh3(Th3);
t = clock() - t;
cout << timeELAPSED << t << endl;
test(x != savex && y != savey && z != savez);

cout << functionDEFINITION << "deplacement" << endl;

mesh3 Th3D = cube(15, 15, 15);
real[int] deltx(Th3D.nv);
real[int] delty(Th3D.nv);
real[int] deltz(Th3D.nv);
real ptm = 1e-5;

savex = x;
savey = y;
savez = z;
deltx = 0;
delty = 0;
deltz = 0;
mesh3 depMesh = deplacement(Th3D, deltax = deltx, deltay = delty, deltaz = deltz,
   ptmerge=ptm, facemerge=1, boolsurface=true);
test(x != savex && y != savey && z != savez);

cout << functionDEFINITION << "checkbemesh" << endl;

{
  mesh3 Th3 = cube (5, 5, 5);
  Th3 = buildSurface(Th3);
  meshS ThS3 = Th3.Gamma;
  int checked = checkbemesh(ThS3, manifolds=[[[11,1],[12,1],[13,1],[14,1],[15,1],[16,1]]]);
  test(checked == 1);
}

cout << functionDEFINITION << "buildlayers" << endl;
{
  mesh Th = square(5, 5);
  int i = 1;
  mesh3 Th3 = cube(5, 5, 5);
  mesh3 res = buildlayers(Th, i);
  test(Th3.nt != res.nt);
  test(Th3.nbe != res.nbe);
  test(Th3.nv != res.nv);
}

cout << functionDEFINITION << "AddLayers" << endl;
{
  bool withmetis=0;
  bool RAS=0;
  int sizeoverlaps=2;
  int nn=2,mm=2;

  func bool AddLayers(mesh & Th,real[int] &ssd,int n,real[int] &unssd)
  {
    //  build a continuous function  uussd (P1) :
    //  ssd in the caracteristics function on the input sub domain.
    //  such that :
    //   unssd = 1 when   ssd =1;
    //   add n layer of element (size of the overlap)
    //   and unssd = 0 ouside of this layer ...
    // ---------------------------------
    fespace Vh(Th,P1);
    fespace Ph(Th,P0);
    Ph s;
    assert(ssd.n==Ph.ndof);
    assert(unssd.n==Vh.ndof);
    unssd=0;
    s[]= ssd;
    Vh u;
    varf vM(u,v)=int2d(Th,qforder=1)(u*v/area);
    matrix M=vM(Ph,Vh);

    for(int i=0;i<n;++i)
      {
        u[]= M*s[];
        u = u>.1;
        unssd+= u[];
        s[]= M'*u[];//';
        s = s >0.1;
      }
    unssd /= (n);
    u[]=unssd;
    ssd=s[];
    return true;
  }

  int withplot=3;
  mesh Th=square(50,50);
  int[int] chlab=[1,1  ,2,1  ,3,1  ,4,1  ];
  Th=change(Th,refe=chlab);
  int npart= nn*mm;
  fespace Ph(Th,P0);
  fespace Vh(Th,P1);

  Ph  part;
  Vh  sun=0,unssd=0;
  Ph xx=x,yy=y,nupp;
  part = int(xx*nn)*mm + int(yy*mm);
  mesh[int] aTh(npart);
  mesh Thi=Th;
  fespace Vhi(Thi,P1);
  Vhi[int] au(npart),pun(npart);
  matrix[int] Rih(npart);
  matrix[int] Dih(npart);
  matrix[int] aA(npart);
  Vhi[int] auntgv(npart);
  Vhi[int] rhsi(npart);

  for(int i=0;i<npart;++i)
    {
      Ph suppi= abs(part-i)<0.1;
      AddLayers(Th,suppi[],sizeoverlaps,unssd[]);
      Thi=aTh[i]=trunc(Th,suppi>0,label=10,split=1);
      Rih[i]=interpolate(Vhi,Vh,inside=1); //  Vh -> Vhi
      if(RAS)
        {
          suppi= abs(part-i)<0.1;
          varf vSuppi(u,v)=int2d(Th,qforder=1)(suppi*v/area);
          unssd[]= vSuppi(0,Vh);
          unssd = unssd>0.;
        }
      pun[i][]=Rih[i]*unssd[];
      sun[] += Rih[i]'*pun[i][];//';
    }
  for(int i=0;i<npart;++i)
    {
      Thi=aTh[i];
      pun[i]= pun[i]/sun;
    }
  macro Grad(u) [dx(u),dy(u)]//EOM
    sun=0;

  for(int i=0;i<npart;++i)
    {
      cout << " build part :" << i << "/" << npart << endl;
      Thi=aTh[i];
      varf va(u,v) =
        int2d(Thi)(Grad(u)'*Grad(v))//')
        +on(1,u=1) + int2d(Thi)(v)
        +on(10,u=0) ;


      aA[i]=va(Vhi,Vhi);
      set(aA[i],solver="SPARSESOLVER");
      rhsi[i][]= va(0,Vhi);
      Dih[i]=pun[i][];
      real[int]  un(Vhi.ndof);
      un=1.;
      real[int] ui=Dih[i]*un;
      sun[] += Rih[i]'*ui;;//';
      varf vaun(u,v) = on(10,u=1);
      auntgv[i][]=vaun(0,Vhi);
    }
  cout << sun[].max << " " << sun[].min<< endl;
  assert( 1.-1e-9 <= sun[].min  && 1.+1e-9 >= sun[].max);

  Vh ref;

  int nitermax=1000;
  {
    Vh un=0;
    for(int iter=0;iter<nitermax;++iter)
      {
        real err=0;
        Vh un1=0;
        for(int i=0;i<npart;++i)
          {
            Thi=aTh[i];
            real[int] ui=Rih[i]*un[];//';
            real[int] bi = ui .* auntgv[i][];
            bi = auntgv[i][] ? bi :  rhsi[i][];
            ui=au[i][];
            ui= aA[i] ^-1 * bi;
            bi = ui-au[i][];
            err += bi'*bi;//';
            au[i][]= ui;
            bi = Dih[i]*ui;
            un1[] += Rih[i]'*bi;//';
          }
        err= sqrt(err);
        cout << iter << " Err = " << err << endl;
        if(err<1e-2) break;
        un[]=un1[];
      }
    ref=un;
  }

}


cout << functionDEFINITION << "trunc" << endl;
{
  int nn=10;

  border cc(t=0,2*pi){x=cos(t);y=sin(t);label=1;}
  mesh Th2= buildmesh(cc(100));
  fespace Vh2(Th2,P2);
  Vh2 ux,uz,p2;
  int[int] rup=[0,2],  rdown=[0,1], rmid=[1,1,2,1,3,1,4,1];
  func zmin= 2-sqrt(4-(x*x+y*y));
  func zmax= 2-sqrt(3.);

  mesh3 Th=buildlayers(Th2,nn,
    coef=  (zmax-zmin)/zmax,
    zbound=[zmin,zmax],
    labelmid=rmid,
    reffaceup = rup,
    reffacelow = rdown);

  func u=x^2+y^2;
  int i = 1;
  mesh3 Th3=trunc(Th,(u-0.5)>1.e-10,split=1,label=135);
  test(Th3.nt < Th.nt);
}

cout << functionDEFINITION << "showborder" << endl;
{
  mesh Th = square(5, 5);
  int i = 1;

  int nx=10;
  int nth=50;
  real xmin=1.,xmax=3.;
  border cc(t=0,2*pi){x=cos(t);y=sin(t);label=1;}
  mesh Thcercle = buildmesh(cc(nth));

  mesh Thcarre=square(nx,nth,[xmin+x*(xmax-xmin),2*pi*y]);
  func f1 = x;
  func f2 = cos(y);
  func f3 = sin(y);
  meshS Thsurf1=movemesh23(Thcarre,transfo=[f1,f2,f3],orientation=-1);
  showborder(Thsurf1);
}

cout << functionDEFINITION << "gluemesh" << endl;
{
  mesh3 Th = cube(5, 5, 5);
  mesh3 Th2 = cube(7, 7, 7);
  mesh3[int] arrayTh(2);
  arrayTh[0] = Th;
  arrayTh[1] = Th2;
  mesh3 Thr = gluemesh(arrayTh);
  test(Thr.nt == Th.nt + Th2.nt);
}

cout << functionDEFINITION << "movemesh23" << endl;
{
  real x0,x1,y0,y1;
  mesh Th = square(5, 5);
  int i = 1;
  mesh3 Th3 = cube (5, 5, 5);
  meshS ThS3 = Th3.Gamma;
  x0=1.; x1=2.; y0=0.; y1=1.5;
  mesh Thsq2 = square(5,8,[x0+(x1-x0)*x,y0+(y1-y0)*y]);

  func ZZ2 = y;
  func XX2 = x;
  func YY2min = 0.;
  func YY2max = 2*pi;

  int[int] ref32h = [0,13];
  int[int] ref32b = [0,14];

  meshS Th32h = movemesh23(Thsq2,transfo=[XX2,YY2max,ZZ2],label=ref32h,orientation=-1);
  test(Th32h.nt != 0);
}

cout << functionDEFINITION << "square3" << endl;
{
  real R = 3, r=1;
  real h = 0.2; //
  int nx = R*2*pi/h;
  int ny = r*2*pi/h;
  func torex = (R+r*cos(y*pi*2))*cos(x*pi*2);
  func torey = (R+r*cos(y*pi*2))*sin(x*pi*2);
  func torez = r*sin(y*pi*2);

  t = clock();
  meshS ThS=square3(nx,ny,[torex,torey,torez]);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
  test(ThS.nt != 0);
}

cout << functionDEFINITION << "getborder" << endl;
{
  real hh=.15;
  real Htube=8;
  real Hneck=2;
  real Hbot=Htube+Hneck;

  real Rext = 1.;
  real Rneck= 0.2;
  int labtop =3, labbottom =2, labcyl = 1;

  meshS Ths;
  {
    meshS Th3c,Th3bottom, Th3top;
    {
      real[int,int] srneck=
      [
      [Htube-0.001,Htube,Htube+Hneck*0.1, Htube+Hneck*0.3  , Htube+Hneck*0.7   , Htube+Hneck*0.9, Htube+Hneck+0.1],
      [Rext       ,Rext ,Rext           , Rext*.7+Rneck*.3 , Rext*.1 + Rneck*.9, Rneck          , Rneck  ]]
      ;
      gslspline rneck(gslinterpcspline,srneck);

      mesh Th2c= square(Hbot/hh,2*pi*Rext/hh,[x*Hbot,y*2*pi]);
      fespace V2x(Th2c,P1);
      macro Dx(u) [dx(u#1),dx(u#2),dx(u#3)] //
      macro Dy(u) [dy(u#1),dy(u#2),dy(u#3)] //
      func E1 = rneck(x)*cos(y);
      func E2 = rneck(x)*sin(y);
      func E3 = x;
      V2x ex1,ex2,ex3;
      real hh2 = hh*hh;
      func  em11 = Dx(ex)'*Dx(ex)/hh2;
      func  em21 = Dx(ex)'*Dy(ex)/hh2;
      func  em22 = Dy(ex)'*Dy(ex)/hh2;
      func perio=[[1,x],[3,x]];
      for(int i=0;i<4;++i)
      {
        ex1=E1;ex2=E2;ex3=E3;
        Th2c=adaptmesh(Th2c,em11,em21,em22,IsMetric=1,periodic=perio,nbvx=100000);
      }
      Th2c=change(Th2c,fregion=labcyl);
      Th3c = movemesh23(Th2c,transfo=[E1 , E2 , E3]);
    }
    int[int] databoder(1);
    t = clock();
    int ncb= getborder(Th3c,databoder);
    t = clock() - t;
    cout << timeELAPSED << t << endl;
    int ktop= Th3c(databoder[databoder[1]]).z < Th3c(databoder[databoder[0]]).z;
    int  kbot=1-ktop;
    real Zbot = Th3c(databoder[databoder[kbot]]).z;
    real Ztop = Th3c(databoder[databoder[ktop]]).z;
    cout << " Z  top  " << Zbot  << endl;
    cout << " Z  bot  " << Ztop << endl;
    assert( ncb ==2);
    test(ncb == 2);
    macro DefBorder(bname,kk,Th3,bb,ll)
    int n#bname= bb[kk+1]-bb[kk];
    border bname(t=bb[kk], bb[kk+1])
    {
      real iv = int(t);
      if( iv == bb[kk+1]) iv = bb[kk];

      cout << t << " iv = " << iv << endl;
      iv = bb[iv];
      x= Th3(iv).x ;
      y= Th3(iv).y ;
      label = ll;
      }//
      DefBorder(btop,ktop,Th3c,databoder,1)
      DefBorder(bbot,kbot,Th3c,databoder,1)
      cout << " btop " << nbtop << " bot: " << nbbot << endl;

      Th3bottom=movemesh23(change(buildmesh(bbot(nbbot),fixeborder=1),fregion=labbottom),transfo=[x,y,Zbot],orientation=-1);
      Th3top=movemesh23(change(buildmesh(btop(-nbtop),fixeborder=1),fregion=labtop),transfo=[x,y,Ztop],orientation=1);
      Ths = Th3c + Th3bottom + Th3top;
    }

    real[int] domaine = [0,0,Htube,1,hh^3/6.];
    mesh3 Th=tetg(Ths,switch="pqaAYY",regionlist=domaine);
}

cout << functionDEFINITION << "bcube" << endl;
{
  t = clock();
  mesh3 th3 = bcube(5, 5, 5);
  t = clock() - t;
  cout << timeELAPSED << t << endl;
}

cout << functionDEFINITION << "extract" << endl;
{
  int n= 10;
  int nvb = (n+1)^3 - (n-1)^3;// Nb boundary vertices
  int ntb = n*n*12; // Nb of Boundary triangle
  mesh3 Th=cube(n,n,n);
  int[int] ll=labels(Th);//  get all labels of the mesh ..
  cout << " the labels "<< ll << endl;
  cout << Th.nbe << endl;
  meshS ThS=extract(Th,label=ll);// extract boundary of 3d Mesh with given label
  cout <<"  mesh nv, nt, nbe" <<  ThS.nv << " - " << ThS. nt << " - " << ThS.nbe << endl;
  cout <<"  computed by hand: " << ntb  << " " << nvb  << endl;
  test(ThS.nt == ntb);
  test(ThS.nv == nvb);
}

cout << functionDEFINITION << "bcube" << endl;
{
  mesh3 th3 = bcube(5, 5, 5);
}
